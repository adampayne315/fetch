// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Item defines model for Item.
type Item struct {
	// Price The total price payed for this item.
	Price string `json:"price"`

	// ShortDescription The Short Product Description for the item.
	ShortDescription string `json:"shortDescription"`
}

// Receipt defines model for Receipt.
type Receipt struct {
	Items []Item `json:"items"`

	// PurchaseDate The date of the purchase printed on the receipt.
	PurchaseDate openapi_types.Date `json:"purchaseDate"`

	// PurchaseTime The time of the purchase printed on the receipt. 24-hour time expected.
	PurchaseTime string `json:"purchaseTime"`

	// Retailer The name of the retailer or store the receipt is from.
	Retailer string `json:"retailer"`

	// Total The total amount paid on the receipt.
	Total string `json:"total"`
}

// PostReceiptsProcessJSONRequestBody defines body for PostReceiptsProcess for application/json ContentType.
type PostReceiptsProcessJSONRequestBody = Receipt

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Submits a receipt for processing.
	// (POST /receipts/process)
	PostReceiptsProcess(c *gin.Context)
	// Returns the points awarded for the receipt.
	// (GET /receipts/{id}/points)
	GetReceiptsIdPoints(c *gin.Context, id string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// PostReceiptsProcess operation middleware
func (siw *ServerInterfaceWrapper) PostReceiptsProcess(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostReceiptsProcess(c)
}

// GetReceiptsIdPoints operation middleware
func (siw *ServerInterfaceWrapper) GetReceiptsIdPoints(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetReceiptsIdPoints(c, id)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/receipts/process", wrapper.PostReceiptsProcess)
	router.GET(options.BaseURL+"/receipts/:id/points", wrapper.GetReceiptsIdPoints)
}

type BadRequestResponse struct {
}

type NotFoundResponse struct {
}

type PostReceiptsProcessRequestObject struct {
	Body *PostReceiptsProcessJSONRequestBody
}

type PostReceiptsProcessResponseObject interface {
	VisitPostReceiptsProcessResponse(w http.ResponseWriter) error
}

type PostReceiptsProcess200JSONResponse struct {
	Id string `json:"id"`
}

func (response PostReceiptsProcess200JSONResponse) VisitPostReceiptsProcessResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostReceiptsProcess400Response = BadRequestResponse

func (response PostReceiptsProcess400Response) VisitPostReceiptsProcessResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type GetReceiptsIdPointsRequestObject struct {
	Id string `json:"id"`
}

type GetReceiptsIdPointsResponseObject interface {
	VisitGetReceiptsIdPointsResponse(w http.ResponseWriter) error
}

type GetReceiptsIdPoints200JSONResponse struct {
	Points *int64 `json:"points,omitempty"`
}

func (response GetReceiptsIdPoints200JSONResponse) VisitGetReceiptsIdPointsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetReceiptsIdPoints404Response = NotFoundResponse

func (response GetReceiptsIdPoints404Response) VisitGetReceiptsIdPointsResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Submits a receipt for processing.
	// (POST /receipts/process)
	PostReceiptsProcess(ctx context.Context, request PostReceiptsProcessRequestObject) (PostReceiptsProcessResponseObject, error)
	// Returns the points awarded for the receipt.
	// (GET /receipts/{id}/points)
	GetReceiptsIdPoints(ctx context.Context, request GetReceiptsIdPointsRequestObject) (GetReceiptsIdPointsResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// PostReceiptsProcess operation middleware
func (sh *strictHandler) PostReceiptsProcess(ctx *gin.Context) {
	var request PostReceiptsProcessRequestObject

	var body PostReceiptsProcessJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostReceiptsProcess(ctx, request.(PostReceiptsProcessRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostReceiptsProcess")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostReceiptsProcessResponseObject); ok {
		if err := validResponse.VisitPostReceiptsProcessResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetReceiptsIdPoints operation middleware
func (sh *strictHandler) GetReceiptsIdPoints(ctx *gin.Context, id string) {
	var request GetReceiptsIdPointsRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetReceiptsIdPoints(ctx, request.(GetReceiptsIdPointsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetReceiptsIdPoints")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetReceiptsIdPointsResponseObject); ok {
		if err := validResponse.VisitGetReceiptsIdPointsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}
